openapi: 3.0.1
info:
  title: Chat Protocol
  description: |
    # WebSocket Chat Protocol Documentation

    This document provides information about the WebSocket-based chat system.

    ## REST API Endpoints

    - GET `/api/v1/bookings/{booking_id}/messages` - Get message history for a booking
    - POST `/api/v1/messages` with `{ "message": { "content": "..." }, "booking_id": 123 }` - Send a message

    ## WebSocket Connection
    Connect to the WebSocket endpoint with the following parameters:

    ```
    ws://<server-url>/cable?token=<jwt-token>
    ```

    The token must be a valid JWT token for either a User or Repairer.

    ## Channel Subscription
    Once connected, subscribe to a chat channel for a specific booking:

    ```javascript
    {
      "command": "subscribe",
      "identifier": JSON.stringify({
        "channel": "ChatChannel",
        "booking_id": bookingId
      })
    }
    ```

    ## Sending Messages
    Send a message through the channel:

    ```javascript
    {
      "command": "message",
      "identifier": JSON.stringify({
        "channel": "ChatChannel",
        "booking_id": bookingId
      }),
      "data": JSON.stringify({
        "action": "receive",
        "content": "Your message content here"
      })
    }
    ```

    ## Receiving Messages
    Messages are received in the following format:

    ```javascript
    {
      "identifier": "{\"channel\":\"ChatChannel\",\"booking_id\":1}",
      "message": {
        "id": 123,
        "content": "Hello!",
        "sender_type": "User",
        "sender_id": 456,
        "sender_name": "John Doe",
        "created_at": "2023-08-01T12:34:56.789Z"
      }
    }
    ```

    ## Disconnection
    To disconnect, simply close the WebSocket connection.

  version: v1
paths: {}
components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this message
        content:
          type: string
          description: Content of the message
        sender_type:
          type: string
          description: Type of entity that sent the message (User or Repairer)
          enum: [User, Repairer]
        sender_id:
          type: integer
          description: ID of the entity that sent the message
        sender_name:
          type: string
          description: Name of the sender
        created_at:
          type: string
          format: date-time
          description: Timestamp when the message was created
